// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Player {
  id         Int      @id
  name       String
  position   String
  teamName   String?
  draftPicks DraftPick[]
  // Add relation to PlayerScore
  playerScores PlayerScore[]
}

model Team {
  id         Int      @id @default(autoincrement())
  name       String
  budget     Int      @default(200)  // Added budget field with default value of 200
  draftPicks DraftPick[]
}

model DraftPick {
  id       Int      @id @default(autoincrement())
  team     Team     @relation(fields: [teamId], references: [id])
  teamId   Int
  player   Player?  @relation(fields: [playerId], references: [id])
  playerId Int?
  round    Int
  cost     Int?     // Added cost field to track how much was spent on each pick
  
  @@unique([teamId, round])
}

model DraftStatus {
  id              Int     @id @default(autoincrement())
  isDraftFinished Boolean @default(false)
}

// New model for player scores
model PlayerScore {
  id           Int      @id @default(autoincrement())
  playerId     Int
  player       Player   @relation(fields: [playerId], references: [id])
  round        String   // "Wild Card", "Divisional", "Conference", "Superbowl"
  isDisabled   Boolean  @default(false)
  statusReason String?  // "eliminated", "notPlaying", or null
  score        Int      @default(0)
  scoreData    String?  // JSON data of all player stats
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([playerId, round])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String      @id @default(cuid())
  name           String?
  email          String?     @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  accounts       Account[]
  sessions       Session[]
  permission     Permission?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Permission {
  id         Int      @id @default(autoincrement())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
  editScores Boolean  @default(false)
  isAdmin    Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ScoringRule {
  id          Int      @id @default(autoincrement())
  position    String   // "QB", "RB", "WR", "TE", "K", "DST"
  category    String   // e.g. "passingTouchdown", "passingYardDivisor", etc.
  value       Float    // The point value or divisor value
  description String   // Description of the rule
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([position, category])
}